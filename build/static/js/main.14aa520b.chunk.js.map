{"version":3,"sources":["types/app-state.ts","types/index.ts","config/index.ts","components/common/date-time.tsx","components/common/input.tsx","components/common/loader.tsx","components/common/toast-message.tsx","redux/action-types/index.ts","services/point-service.ts","redux/actions/index.ts","redux/selectors/index.ts","components/main/chart-input.tsx","components/chart/axis.tsx","components/chart/xy-axis-line-chart.tsx","components/chart/line.tsx","components/chart/area.tsx","components/chart/tooltip.tsx","components/chart/line-chart.tsx","pages/main.tsx","App.tsx","redux/reducers/app-state-reducer.ts","redux/reducers/points-reducer.ts","redux/reducers/server-error-reducer.ts","redux/reducers/index.ts","redux/store/index.ts","reportWebVitals.ts","index.tsx"],"names":["AppState","CONFIG","dateTimeFormat","timeFormat","margins","top","right","bottom","left","width","height","DateTime","value","label","onChange","data-test","className","inputProps","moment","Input","type","event","target","Loader","role","ToastMessage","props","header","body","onClose","aria-live","aria-atomic","style","position","minWidth","zIndex","data-dismiss","aria-label","onClick","aria-hidden","ADD_POINT","ADD_POINT_SERVER_ERROR","ADD_POINT_SUCCESS","FETCH_POINTS","FETCH_POINTS_SERVER_ERROR","FETCH_POINTS_SUCCESS","SERVER_ERROR","NO_SERVER_ERROR","apiUrl","process","headers","fetchPointsDispatch","dispatch","axios","get","then","response","points","data","payload","catch","addPointDispatch","point","post","Services","getAppState","state","appState","getPoints","hasServerError","serverError","ChartInput","useSelector","React","useState","Date","x","setX","y","setY","useDispatch","useEffect","toDate","val","parseInt","format","disabled","Axis","orient","scale","tickSize","padding","ticks","translate","ref","useRef","current","axisType","axis","d3","tickPadding","tickFormat","call","transform","XYAxisLineChart","scales","svgDimension","xAxisProps","xScale","yAxisProps","yScale","Line","line","d","curve","path","stroke","strokeWidth","fill","Area","area","y0","y1","areaGradient","id","gradientUnits","x1","x2","y2","offset","stopColor","stopOpacity","Tooltip","mouseValue","d0","d1","i","bisectMouseValue","translateX","translateY","tooltip","strokeDasharray","r","fontSize","overlay","opacity","onMouseMove","invert","nativeEvent","offsetX","attr","text","onMouseOut","LineChart","xLabel","yLabel","domain","p","range","clamp","yText","xText","rectOverlay","rx","ry","viewBox","preserveAspectRatio","Main","parseTime","map","sort","p1","p2","length","App","href","initialState","NO_STATE","AppStateReducer","action","PointsReducer","ServerErrorReducer","combineReducers","middlewares","ReduxThunk","store","applyMiddleware","createStore","createStoreWithMiddleware","rootReducer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14aa520b.chunk.js","sourcesContent":["export enum AppState {\r\n    NO_STATE = 0,\r\n    FETCH_POINTS = 1,\r\n    FETCH_POINTS_SERVER_ERROR = 2,\r\n    FETCH_POINTS_SUCCESS = 3,\r\n    ADD_POINT = 4,\r\n    ADD_POINT_SERVER_ERROR = 5,\r\n    ADD_POINT_SUCCESS = 6\r\n}","export * from './app-state';\r\nexport * from './dimension';\r\nexport * from './margins';\r\nexport * from './point';\r\nexport * from './scales';\r\nexport * from './test-case';","const CONFIG: Record<string, any> = {\r\n    dateTimeFormat: 'YYYY-MM-DDTHH:mm:ss.SSS[Z]',\r\n    timeFormat: 'HH:mm:ss.SSS',\r\n\r\n    margins: {top: 50, right: 100, bottom: 50, left: 100},\r\n    width: 900,\r\n    height: 350,\r\n}\r\n\r\nexport default CONFIG;","import React from \"react\";\r\nimport Datetime from \"react-datetime\";\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport {Moment} from \"moment\";\r\nimport CONFIG from \"../../config\";\r\n\r\nexport interface DateTimeProps {\r\n    value: Date;\r\n    label: string;\r\n    onChange: (val: string | Moment) => void;\r\n}\r\n\r\n/**\r\n * Date time component\r\n * @param {Date} value\r\n * @param {string} label\r\n * @param {(val: string | Moment) => void} onChange\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst DateTime = ({value, label, onChange}: DateTimeProps): JSX.Element => {\r\n    return (\r\n        <div data-test=\"component-date-time\" className=\"form-group mb-0\">\r\n            <label data-test=\"date-time-label\">{label}</label>\r\n            <Datetime data-test=\"date-time-element\" value={value}\r\n                      inputProps={{className: 'form-control'}}\r\n                      onChange={(moment: string | Moment) => onChange(moment)}\r\n                      timeFormat={CONFIG.timeFormat}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DateTime;","import React from \"react\";\r\n\r\nexport interface InputPops {\r\n    value: number | string;\r\n    label: string;\r\n    type: \"text\" | \"number\";\r\n    onChange: (val: string) => void;\r\n}\r\n\r\n/**\r\n * Input component\r\n * @param value\r\n * @param label\r\n * @param type\r\n * @param onChange\r\n * @constructor\r\n *\r\n * @return JSX.Element\r\n */\r\nconst Input = ({value, label, type, onChange}: InputPops): JSX.Element => {\r\n    return (\r\n        <div data-test=\"component-input\" className=\"form-group mb-0\">\r\n            <label data-test=\"input-label\">{label}</label>\r\n            <input data-test=\"input-element\" type={type} value={value}\r\n                   className=\"form-control\"\r\n                   onChange={((event: React.ChangeEvent<HTMLInputElement>) => onChange(event.target.value))}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","import React from \"react\";\r\n\r\n/**\r\n * Loader component\r\n * @constructor\r\n */\r\nconst Loader = (): JSX.Element => {\r\n    return (\r\n        <div data-test=\"component-loader\" className=\"d-flex justify-content-center align-items-center h-100 w-100\">\r\n            <div className=\"spinner-border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import React from \"react\";\r\n\r\nexport interface ToastMessageProps {\r\n    header: string;\r\n    body: string;\r\n    onClose: () => void;\r\n}\r\n\r\n/**\r\n * ToastMessage component - renders toast message\r\n * @function ToastMessage\r\n *\r\n * @param {ToastMessageProps} props\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst ToastMessage = (props: ToastMessageProps) => {\r\n    const {header, body, onClose}: ToastMessageProps = props;\r\n\r\n    return (\r\n        <div data-test=\"component-toast-message\" className=\"toast show fade bg-danger text-white\" role=\"alert\"\r\n             aria-live=\"assertive\" aria-atomic=\"true\"\r\n             style={{position: \"fixed\", right: \"5px\", bottom: \"5px\", minWidth: \"200px\", zIndex: 1}}>\r\n            <div className=\"toast-header bg-danger text-white\">\r\n                <strong data-test=\"toast-header\" className=\"mr-auto\">{header}</strong>\r\n                <button data-test=\"toast-close-button\" type=\"button\" className=\"ml-2 mb-1 close text-white\"\r\n                        data-dismiss=\"toast\"\r\n                        aria-label=\"Close\" onClick={() => onClose()}>\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div data-test=\"toast-body\" className=\"toast-body\">\r\n                {body}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToastMessage;\r\n","export const ADD_POINT = \"ADD_POINT\";\nexport const ADD_POINT_SERVER_ERROR = \"ADD_POINT_SERVER_ERROR\";\nexport const ADD_POINT_SUCCESS = \"ADD_POINT_SUCCESS\";\nexport const FETCH_POINTS = \"FETCH_POINTS\";\nexport const FETCH_POINTS_SERVER_ERROR = \"FETCH_POINTS_SERVER_ERROR\";\nexport const FETCH_POINTS_SUCCESS = \"FETCH_POINTS_SUCCESS\";\nexport const SERVER_ERROR = \"SERVER_ERROR\";\nexport const NO_SERVER_ERROR = \"NO_SERVER_ERROR\";","import axios, {AxiosResponse} from \"axios\";\nimport {Point} from \"../types\";\n\nconst apiUrl: string = process.env.REACT_APP_API_URL as string;\nconst headers: Record<string, string> = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n};\n\nexport const fetchPoints = (): Promise<AxiosResponse> => {\n    return axios.get(`${apiUrl}/data`);\n};\n\nexport const addPoint = (point: Point): Promise<AxiosResponse> => {\n    return axios.post(`${apiUrl}/points`, {\n        data: point,\n    }, {headers});\n};\n","import {AxiosResponse} from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {Point} from \"../../types\";\r\nimport {\r\n    ADD_POINT,\r\n    ADD_POINT_SERVER_ERROR,\r\n    ADD_POINT_SUCCESS,\r\n    FETCH_POINTS,\r\n    FETCH_POINTS_SERVER_ERROR,\r\n    FETCH_POINTS_SUCCESS,\r\n    NO_SERVER_ERROR\r\n} from \"../action-types\";\r\nimport * as Services from \"../../services\";\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches NO_SERVER_ERROR action\r\n * @function setNoServerError\r\n *\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const setNoServerError = () => (dispatch: Dispatch) => {\r\n    dispatch({type: NO_SERVER_ERROR})\r\n};\r\n\r\n\r\n/**\r\n * Dispatch axios action to fetch points\r\n * @param dispatch\r\n *\r\n * @return Promise\r\n */\r\nexport const fetchPointsDispatch = (dispatch: Dispatch): Promise<any> => {\r\n    const addPointsFn = (points: Point[]): void => {\r\n        dispatch({\r\n            type: FETCH_POINTS_SUCCESS,\r\n            payload: points\r\n        });\r\n    };\r\n\r\n    dispatch({\r\n        type: FETCH_POINTS\r\n    });\r\n\r\n    return Services.fetchPoints().then((response: AxiosResponse) => {\r\n        addPointsFn(response.data);\r\n    }).catch(() => {\r\n        dispatch({type: FETCH_POINTS_SERVER_ERROR});\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Dispatch axios action to add a point\r\n * @param point\r\n *\r\n * @return Promise\r\n */\r\nexport const addPointDispatch = (point: Point) => (dispatch: Dispatch): Promise<any> => {\r\n    const addPointFn = (newPoint: Point): void => {\r\n        dispatch({\r\n            type: ADD_POINT_SUCCESS,\r\n            payload: newPoint\r\n        });\r\n    };\r\n\r\n    dispatch({\r\n        type: ADD_POINT,\r\n    });\r\n\r\n    return Services.addPoint(point).then(() => {\r\n        addPointFn(point);\r\n    }).catch(() => {\r\n        dispatch({type: ADD_POINT_SERVER_ERROR});\r\n    });\r\n};\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches ADD_POINTS action\r\n *     after axios promise resolves\r\n * @function fetchPoints\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const fetchPoints = () => {\r\n    return fetchPointsDispatch;\r\n}\r\n\r\n/**\r\n * Returns Redux Thunk function that dispatches ADD_POINT action\r\n *     after axios promise resolves\r\n * @function addPoint\r\n * @returns {function} - Redux Thunk function.\r\n */\r\nexport const addPoint = (point: Point) => {\r\n    return addPointDispatch(point);\r\n}\r\n\r\n\r\n","import {RootState} from \"../store\";\n\nexport const getAppState = (state: RootState) => state.appState;\nexport const getPoints = (state: RootState) => state.points;\nexport const hasServerError = (state: RootState) => state.serverError;\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport moment, {Moment} from \"moment\";\r\nimport DateTime from \"../common/date-time\";\r\nimport {Input} from \"../common\";\r\nimport CONFIG from \"../../config\";\r\nimport {addPointDispatch} from \"../../redux/actions\";\r\nimport {AppState} from \"../../types\";\r\nimport {getAppState} from \"../../redux/selectors\";\r\n\r\n/**\r\n * Chart input component\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst ChartInput = (): JSX.Element => {\r\n    const initY: number = 50;\r\n    const appState: AppState = useSelector(getAppState);\r\n    const [x, setX] = React.useState(new Date());\r\n    const [y, setY] = React.useState(initY);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (appState === AppState.ADD_POINT_SUCCESS) {\r\n            setX(new Date());\r\n            setY(initY);\r\n        }\r\n    }, [appState]);\r\n\r\n    const onChangeX = (moment: string | Moment) => {\r\n        if (typeof moment === \"string\") {\r\n            setX(new Date(moment));\r\n        } else {\r\n            setX(moment.toDate());\r\n        }\r\n    };\r\n\r\n    const onSubmitClick = () => {\r\n        dispatch(addPointDispatch({\r\n            x: moment(x).format(CONFIG.dateTimeFormat as string),\r\n            y: y\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <form data-test=\"component-chart-input\">\r\n            <div className=\"p-2 form-container\">\r\n                <div className=\"form-row\">\r\n                    <div className=\"col-md-5\">\r\n                        <DateTime data-test=\"x-date-time-element\" label=\"Time (X)\" value={x} onChange={onChangeX}/>\r\n                    </div>\r\n                    <div className=\"col-md-5\">\r\n                        <Input data-test=\"y-input-element\" label=\"Value (Y)\" value={y} type=\"number\"\r\n                               onChange={(val: string) => setY(parseInt(val))}/>\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                        <label>&nbsp;</label>\r\n                        <button data-test=\"submit-button-element\" onClick={onSubmitClick}\r\n                                className=\"btn btn-primary w-100\"\r\n                                disabled={(appState === AppState.ADD_POINT || appState === AppState.FETCH_POINTS)}>Submit\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ChartInput;","import React, {MutableRefObject, useEffect, useRef} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {AxisScale} from \"d3\";\r\n\r\nexport interface AxisProps {\r\n    orient: 'Left' | 'Top' | 'Right' | 'Bottom';\r\n    scale: AxisScale<any>;\r\n    tickSize: number;\r\n    padding: number;\r\n    ticks: any;\r\n    format: ((n: number | { valueOf(): number; }) => string) | ((d: Date) => string) | null;\r\n    className: string;\r\n    translate: string;\r\n}\r\n\r\n/**\r\n * Axis component\r\n * @param orient\r\n * @param scale\r\n * @param tickSize\r\n * @param padding\r\n * @param ticks\r\n * @param format\r\n * @param className\r\n * @param translate\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Axis = ({orient, scale, tickSize, padding, ticks, format, className, translate}: AxisProps): JSX.Element => {\r\n    const ref: MutableRefObject<SVGGElement | null> = useRef(null);\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            const axisType: ('axisLeft' | 'axisTop' | 'axisRight' | 'axisBottom') =\r\n                `axis${orient}` as ('axisLeft' | 'axisTop' | 'axisRight' | 'axisBottom');\r\n            const axis = (d3[axisType] as Function)()\r\n                .scale(scale)\r\n                .tickSize(-tickSize)\r\n                .tickPadding(padding);\r\n\r\n            if (format) {\r\n                axis.tickFormat(format);\r\n            }\r\n\r\n            d3.select(ref.current)\r\n                .call(axis)\r\n        }\r\n    }, [orient, scale, tickSize, padding, ticks, format]);\r\n\r\n    return (<g data-test=\"component-axis\" className={className} transform={translate} ref={ref}/>);\r\n};\r\n\r\nexport default Axis;","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {Dimension, Margins} from \"../../types\";\r\nimport Axis, {AxisProps} from \"./axis\";\r\n\r\nexport interface XYAxisLineChartProps {\r\n    scales: any;\r\n    svgDimension: Dimension;\r\n    margins: Margins;\r\n}\r\n\r\n/**\r\n * XYAxisLineChart component\r\n * @param scales\r\n * @param svgDimension\r\n * @param margins\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst XYAxisLineChart = ({scales, svgDimension, margins}: XYAxisLineChartProps): JSX.Element => {\r\n    const xAxisProps: AxisProps = {\r\n        orient: 'Bottom',\r\n        translate: `translate(0,${svgDimension.height - margins.bottom})`,\r\n        scale: scales.xScale,\r\n        tickSize: svgDimension.height - margins.top - margins.bottom,\r\n        ticks: 10,\r\n        className: 'axisBottom',\r\n        padding: 10,\r\n        format: null\r\n    }\r\n    const yAxisProps: AxisProps = {\r\n        orient: 'Left',\r\n        translate: `translate(${margins.left},0)`,\r\n        scale: scales.yScale,\r\n        tickSize: svgDimension.width - margins.left - margins.right,\r\n        ticks: 10,\r\n        className: 'axisLeft',\r\n        padding: 15,\r\n        format: d3.format(\"\")\r\n    }\r\n\r\n    return <g data-test=\"component-xy-axis-line-chart\">\r\n        <Axis data-test=\"x-axis-element\" {...xAxisProps} />\r\n        <Axis data-test=\"y-axis-element\" {...yAxisProps} />\r\n    </g>\r\n};\r\n\r\nexport default XYAxisLineChart;","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {Point, Scales} from \"../../types\";\r\n\r\nexport interface LineProps {\r\n    scales: Scales;\r\n    data: Point[];\r\n}\r\n\r\n/**\r\n * Line component\r\n * @param scales\r\n * @param data\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Line = ({scales, data}: LineProps): JSX.Element => {\r\n    const {xScale, yScale} = scales;\r\n    const line: d3.Line<any> = d3.line()\r\n        .x((d: any) => xScale(d.x) as any)\r\n        .y((d: any) => yScale(d.y) as any)\r\n        .curve(d3.curveMonotoneX);\r\n\r\n    const path =\r\n        <path\r\n            data-test=\"path-element\"\r\n            d={line(data as any) as (string | undefined)}\r\n            stroke=\"#FFF056\"\r\n            strokeWidth=\"3px\"\r\n            fill=\"none\"\r\n        />\r\n    return (\r\n        <g data-test=\"component-line\">{path}</g>\r\n    )\r\n};\r\n\r\nexport default Line;","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {Dimension, Margins, Point, Scales} from \"../../types\";\r\n\r\nexport interface AreaProps {\r\n    scales: Scales;\r\n    data: Point[];\r\n    svgDimension: Dimension;\r\n    margins: Margins;\r\n}\r\n\r\n/**\r\n * Area component\r\n * @param scales\r\n * @param data\r\n * @param svgDimension\r\n * @param margins\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Area = ({scales, data, svgDimension, margins}: AreaProps): JSX.Element => {\r\n    const {xScale, yScale} = scales;\r\n    const area: d3.Area<any> = d3.area()\r\n        .x((d: any) => xScale(d.x) as any)\r\n        .y0(svgDimension.height - margins.bottom)\r\n        .y1((d: any) => yScale(d.y) as any)\r\n        .curve(d3.curveMonotoneX);\r\n\r\n    const areaGradient: JSX.Element =\r\n        <linearGradient\r\n            data-test=\"liner-gradient-element\"\r\n            id=\"area-gradient\"\r\n            gradientUnits=\"userSpaceOnUse\"\r\n            x1=\"0\"\r\n            y1={yScale(0)}\r\n            x2=\"0\"\r\n            y2={yScale(1000)}\r\n        >\r\n            <stop\r\n                offset=\"0%\"\r\n                stopColor=\"#333333\"\r\n                stopOpacity=\"0\"\r\n            >\r\n            </stop>\r\n            <stop\r\n                offset=\"100%\"\r\n                stopColor=\"#FFF056\"\r\n                stopOpacity=\"0.5\"\r\n            >\r\n            </stop>\r\n        </linearGradient>\r\n\r\n    const path: JSX.Element =\r\n        <path\r\n            data-test=\"path-element\"\r\n            d={area(data) as string | undefined}\r\n            className=\"area\"\r\n        />\r\n    return (\r\n        <g data-test=\"component-area\">{areaGradient}{path}</g>\r\n    )\r\n}\r\n\r\nexport default Area;","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {Dimension, Margins, Point, Scales} from \"../../types\";\r\n\r\nexport interface TooltipProps {\r\n    svgDimension: Dimension;\r\n    scales: Scales;\r\n    margins: Margins;\r\n    data: any[];\r\n}\r\n\r\n/**\r\n * Tooltip element\r\n * @param svgDimension\r\n * @param scales\r\n * @param margins\r\n * @param data\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst Tooltip = ({svgDimension, scales, margins, data}: TooltipProps): JSX.Element => {\r\n    const {xScale, yScale}: Scales = scales;\r\n    let bisectMouseValue:\r\n        (array: ArrayLike<any>, x: string | Date | null, lo?: number | undefined, hi?: number | undefined) => number = d3.bisector((d: Point) => d.x).left;\r\n    const translateX: number = xScale(data[1].x) as number;\r\n    const translateY: number = yScale(data[1].y) as number;\r\n\r\n    let mouseValue: any, d0: Point, d1: Point, i: number, d: Point;\r\n    const tooltip: JSX.Element = (\r\n        <g\r\n            data-test=\"tooltip-element\"\r\n            className=\"lineChartTooltip\"\r\n            transform={`translate(${translateX},${translateY})`}\r\n        >\r\n            <line\r\n                className=\"tooltipHoverLine\"\r\n                y1=\"0\"\r\n                y2={svgDimension.height - translateY - margins.bottom}\r\n                stroke=\"#FFF056\"\r\n                strokeWidth=\"1px\"\r\n                strokeDasharray=\"5\"\r\n            />\r\n            <circle r=\"6px\" stroke=\"#FFF056\" strokeWidth=\"3px\" fill=\"#333333\"/>\r\n            <text x=\"-10\" y=\"-10\" fontSize=\"12px\">{data[1].y}</text>\r\n        </g>\r\n    )\r\n    const overlay: JSX.Element = (\r\n        <rect\r\n            data-test=\"overlay-element\"\r\n            transform={`translate(${margins.left},${margins.top})`}\r\n            className=\"lineChartOverlay\"\r\n            width={svgDimension.width - margins.left - margins.right}\r\n            height={svgDimension.height - margins.top - margins.bottom}\r\n            opacity=\"0\"\r\n            onMouseMove={(event) => {\r\n                mouseValue = (xScale as any).invert(event.nativeEvent.offsetX) as any;\r\n                i = bisectMouseValue(data, mouseValue, 1);\r\n                d0 = data[i - 1];\r\n                d1 = data[i];\r\n                d = (mouseValue - (d0 as any).x) < ((d1 as any).x - mouseValue) ? d0 : d1;\r\n                d3.select(\".lineChartTooltip\").attr(\"transform\", \"translate(\" + xScale(d.x) + \",\" + yScale(d.y) + \")\");\r\n                d3.select(\".lineChartTooltip line\").attr(\"y2\", svgDimension.height - (yScale as any)(d.y) - margins.bottom);\r\n                d3.select(\".lineChartTooltip text\").text(d.y);\r\n            }}\r\n            onMouseOut={() => {\r\n                d3.select(\".lineChartTooltip\").attr(\"transform\", \"translate(\" + translateX + \",\" + translateY + \")\");\r\n                d3.select(\".lineChartTooltip line\").attr(\"y2\", svgDimension.height - translateY - margins.bottom);\r\n                d3.select(\".lineChartTooltip text\").text(data[2].y);\r\n            }}\r\n        />\r\n    )\r\n    return <g data-test=\"component-tooltip\">{overlay}{tooltip}</g>;\r\n};\r\n\r\nexport default Tooltip;","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {AxisScale} from \"d3\";\r\nimport XYAxisLineChart from \"./xy-axis-line-chart\";\r\nimport Line from \"./line\";\r\nimport Area from \"./area\";\r\nimport {Dimension, Margins, Point, Scales} from \"../../types\";\r\nimport Tooltip from \"./tooltip\";\r\n\r\nexport interface LineChartProps {\r\n    data: Point[];\r\n    svgDimension: Dimension;\r\n    margins: Margins;\r\n    xLabel: string;\r\n    yLabel: string;\r\n}\r\n\r\n/**\r\n * LineChart component\r\n * @param data\r\n * @param svgDimension\r\n * @param margins\r\n * @param xLabel\r\n * @param yLabel\r\n * @constructor\r\n *\r\n * @return {JSX.Element}\r\n */\r\nconst LineChart = ({data, svgDimension, margins, xLabel, yLabel}: LineChartProps) => {\r\n    const xScale: AxisScale<any> = d3.scaleTime()\r\n        .domain(d3.extent(data, (p: any) => p.x) as any)\r\n        .range([margins.left, svgDimension.width - margins.right])\r\n        .clamp(true);\r\n    const yScale: AxisScale<any> = d3.scaleTime()\r\n        .domain(d3.extent(data, (p: any) => p.y) as any)\r\n        .range([svgDimension.height - margins.top, margins.bottom])\r\n        .clamp(true);\r\n    const scales: Scales = {xScale, yScale};\r\n    const yText: JSX.Element = (\r\n        <text data-test=\"y-text-element\" transform={`translate(60, ${svgDimension.height / 2})rotate(-90)`}\r\n              fontSize=\"13\">{yLabel}</text>\r\n    )\r\n    const xText: JSX.Element = (\r\n        <text data-test=\"x-text-element\" transform={`translate(${svgDimension.width / 2}, ${svgDimension.height - 10})`}\r\n              fontSize=\"13\">{xLabel}</text>\r\n    )\r\n\r\n    const rectOverlay: JSX.Element = <rect data-test=\"overlay-element\"\r\n                                           transform={`translate(${margins.left / 2},${margins.top / 2})`}\r\n                                           className=\"rectOverlayLineChart\" width={svgDimension.width - margins.right}\r\n                                           height={svgDimension.height - margins.top} rx=\"5\" ry=\"5\"/>\r\n    return <svg data-test=\"component-line-chart\" className=\"lineChartSvg\"\r\n                viewBox={`0 0 ${svgDimension.width} ${svgDimension.height}`}\r\n                preserveAspectRatio=\"none\">\r\n        {rectOverlay}{xText}{yText}\r\n        <XYAxisLineChart data-test=\"xy-axis-element\" scales={scales} margins={margins} svgDimension={svgDimension}/>\r\n        <Line data-test=\"line-element\" scales={scales} data={data}/>\r\n        <Area data-test=\"area-element\" scales={scales} data={data} svgDimension={svgDimension} margins={margins}/>\r\n        <Tooltip data-test=\"tooltip-element\" svgDimension={svgDimension} scales={scales} margins={margins} data={data}/>\r\n    </svg>\r\n}\r\n\r\nexport default LineChart;","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport moment from \"moment\";\r\nimport {ChartInput} from \"../components/main\";\r\nimport {AppState, Dimension, Margins, Point} from \"../types\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getAppState, getPoints} from \"../redux/selectors\";\r\nimport CONFIG from \"../config\";\r\nimport {Loader} from \"../components/common\";\r\nimport LineChart from \"../components/chart/line-chart\";\r\n\r\n/**\r\n * DisConnectedChart component - renders chart and input\r\n * @function DisConnectedChart\r\n *\r\n * @constructor\r\n *\r\n * {JSX.Element}\r\n */\r\nconst Main = (): JSX.Element => {\r\n    const margins: Margins = CONFIG.margins;\r\n    const svgDimension: Dimension = {height: CONFIG.height, width: CONFIG.width};\r\n\r\n    const points: Point[] = useSelector(getPoints);\r\n    const appState: AppState = useSelector(getAppState);\r\n\r\n    // Format the points to be parsed by d3\r\n    const parseTime = d3.timeParse(\"%Y-%m-%dT%H:%M:%S%Z\");\r\n    let data: Point[] = points.map((d: Point) => {\r\n        return {\r\n            x: parseTime(moment(d.x).format()),\r\n            y: d.y\r\n        }\r\n    });\r\n\r\n    // Sort the data by time\r\n    data.sort((p1: Point, p2: Point) =>\r\n        (parseInt(moment(p1.x).format('X')) - parseInt(moment(p2.x).format('X'))));\r\n\r\n    return (\r\n        <div data-test=\"component-main\" className=\"d-flex flex-column h-100\">\r\n            <div>\r\n                <ChartInput data-test=\"chart-input-element\"/>\r\n            </div>\r\n            <div className=\"flex-1\">\r\n                {\r\n                    (appState === AppState.FETCH_POINTS) ? <Loader data-test=\"loader-element\"/> :\r\n                        (points.length ?\r\n                                <LineChart data-test=\"line-chart-element\" data={data} svgDimension={svgDimension}\r\n                                           margins={margins} xLabel=\"Time\" yLabel=\"Value\"/> : null\r\n                        )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport Main from \"./pages/main\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchPointsDispatch, setNoServerError} from \"./redux/actions\";\r\nimport {hasServerError} from \"./redux/selectors\";\r\nimport {ToastMessage} from \"./components/common\";\r\n\r\n/**\r\n * App component - renders app\r\n * @function App\r\n *\r\n * @constructor\r\n *\r\n * {JSX.Element}\r\n */\r\nexport const App = (): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    const serverError: boolean = useSelector(hasServerError);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPointsDispatch);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <main data-test=\"component-app\" className=\"d-flex flex-column vh-100\">\r\n            <nav className=\"navbar navbar-light bg-light\">\r\n                <a className=\"navbar-brand\" href=\"#\">Konux chart</a>\r\n            </nav>\r\n            {serverError ?\r\n                <ToastMessage data-test=\"toast-message-element\" header=\"Error!\" body=\"Server error!\"\r\n                              onClose={() => dispatch(setNoServerError())}/>\r\n                : null}\r\n            <div className=\"flex-1\">\r\n                <Main/>\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {\n    ADD_POINT,\n    ADD_POINT_SERVER_ERROR,\n    ADD_POINT_SUCCESS,\n    FETCH_POINTS,\n    FETCH_POINTS_SERVER_ERROR,\n    FETCH_POINTS_SUCCESS\n} from \"../action-types\";\nimport {ActionTypes} from \"../types\";\nimport {AppState} from \"../../types\";\n\nconst initialState: AppState = AppState.NO_STATE;\n\n/**\n * @function AppStateReducer\n *\n * @param {AppState} state - State before reducer.\n * @param {ActionTypes} action - Action sent to reducer.\n *\n * @returns {AppState} - New state.\n */\nconst AppStateReducer = (state: AppState = initialState, action: ActionTypes): AppState => {\n    switch (action.type) {\n        case FETCH_POINTS:\n            return AppState.FETCH_POINTS;\n        case FETCH_POINTS_SERVER_ERROR:\n            return AppState.FETCH_POINTS_SERVER_ERROR;\n        case FETCH_POINTS_SUCCESS:\n            return AppState.FETCH_POINTS_SUCCESS;\n        case ADD_POINT:\n            return AppState.ADD_POINT;\n        case ADD_POINT_SERVER_ERROR:\n            return AppState.ADD_POINT_SERVER_ERROR;\n        case ADD_POINT_SUCCESS:\n            return AppState.ADD_POINT_SUCCESS;\n        default:\n            return state;\n    }\n};\n\nexport default AppStateReducer;\n","import {Point} from \"../../types\";\r\nimport {ActionTypes} from \"../types\";\r\nimport {ADD_POINT_SUCCESS, FETCH_POINTS_SUCCESS} from \"../action-types\";\r\n\r\nconst initialState: Point[] = [];\r\n\r\n/**\r\n * @function PointsReducer\r\n *\r\n * @param {boolean} state - State before reducer.\r\n * @param {ActionTypes} action - Action sent to reducer.\r\n *\r\n * @returns {Point[]} - New state.\r\n */\r\nconst PointsReducer = (state: Point[] = initialState, action: ActionTypes): Point[] => {\r\n    switch (action.type) {\r\n        case ADD_POINT_SUCCESS:\r\n            return [...state, action.payload]\r\n        case FETCH_POINTS_SUCCESS:\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default PointsReducer;","import {ADD_POINT_SERVER_ERROR, FETCH_POINTS_SERVER_ERROR, NO_SERVER_ERROR, SERVER_ERROR} from \"../action-types\";\r\nimport {ActionTypes} from \"../types\";\r\n\r\nconst initialState: boolean = false;\r\n\r\n/**\r\n * @function ServerErrorReducer\r\n *\r\n * @param {boolean} state - State before reducer.\r\n * @param {ActionTypes} action - Action sent to reducer.\r\n *\r\n * @returns {boolean} - New state.\r\n */\r\nconst ServerErrorReducer = (state: boolean = initialState, action: ActionTypes): boolean => {\r\n    switch (action.type) {\r\n        case ADD_POINT_SERVER_ERROR:\r\n        case FETCH_POINTS_SERVER_ERROR:\r\n        case SERVER_ERROR:\r\n            return true;\r\n        case NO_SERVER_ERROR:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default ServerErrorReducer;\r\n","import {combineReducers} from \"redux\";\nimport AppStateReducer from \"./app-state-reducer\";\nimport PointsReducer from \"./points-reducer\";\nimport ServerErrorReducer from \"./server-error-reducer\";\n\nexport default combineReducers({\n    appState: AppStateReducer,\n    points: PointsReducer,\n    serverError: ServerErrorReducer,\n});\n","import {applyMiddleware, createStore} from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nexport const middlewares = [ReduxThunk];\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\n\nconst store = createStoreWithMiddleware(rootReducer);\nexport type RootState = ReturnType<typeof store.getState>;\nexport default store;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/store\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}